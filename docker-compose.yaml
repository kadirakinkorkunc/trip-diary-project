version : "3"

services:
    db:
       image: postgres
       environment:
        - "POSTGRES_HOST_AUTH_METHOD=trust"
       volumes:
        - postgres-data:/var/lib/postgresql/data
       ports:
        - 5432:5432

    dj: 
       container_name: dja 
       build: django # django's Dockerfile path
       command: bash -c "while !</dev/tcp/db/5432; do sleep 1; done; python manage.py migrate && python manage.py loaddata dumpdata.json && python manage.py runserver 0.0.0.0:90"

       volumes:
        - ./django:/code
       
       ports:
        - "90:90"
       depends_on:
        - db

      
    ng:
        container_name: ngtrip
        build: angular
        ports:
            - "8080:80"
        depends_on:
        - dj
 

            
    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
            
    kafka:
        image: confluentinc/cp-kafka:latest
        depends_on:
            - zookeeper
        ports:
            - 9092:9092
        environment:
            KAFKA_LOG_DIRS: "/kafka/kafka-logs"
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
    consumer:
        container_name : springkafkaconsumer
        build: kafkaconsumer
        command: bash -c "while !</dev/tcp/kafka/29092; do >&2 echo 'Waiting for kafka to up...' sleep 1; done;"
        ports:
            - "8070:8070"
        volumes:
            - ./logs:/logs
        depends_on:
          - kafka
        environment:
          SPRING_KAFKA_BOOTSTRAPSERVERS: kafka:29092
          TZ: "Asia/Istanbul"
        restart: always
volumes:
    postgres-data: